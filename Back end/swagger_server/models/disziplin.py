# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Disziplin(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, name: str=None, a: float=None, c: float=None, d: float=None, geschlecht: str=None, formel: str=None):  # noqa: E501
        """Disziplin - a model defined in Swagger

        :param id: The id of this Disziplin.  # noqa: E501
        :type id: str
        :param name: The name of this Disziplin.  # noqa: E501
        :type name: str
        :param a: The a of this Disziplin.  # noqa: E501
        :type a: float
        :param c: The c of this Disziplin.  # noqa: E501
        :type c: float
        :param d: The d of this Disziplin.  # noqa: E501
        :type d: float
        :param geschlecht: The geschlecht of this Disziplin.  # noqa: E501
        :type geschlecht: str
        :param formel: The formel of this Disziplin.  # noqa: E501
        :type formel: str
        """
        self.swagger_types = {
            'id': str,
            'name': str,
            'a': float,
            'c': float,
            'd': float,
            'geschlecht': str,
            'formel': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'a': 'a',
            'c': 'c',
            'd': 'd',
            'geschlecht': 'geschlecht',
            'formel': 'formel'
        }
        self._id = id
        self._name = name
        self._a = a
        self._c = c
        self._d = d
        self._geschlecht = geschlecht
        self._formel = formel

    @classmethod
    def from_dict(cls, dikt) -> 'Disziplin':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The disziplin of this Disziplin.  # noqa: E501
        :rtype: Disziplin
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Disziplin.


        :return: The id of this Disziplin.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Disziplin.


        :param id: The id of this Disziplin.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Disziplin.


        :return: The name of this Disziplin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Disziplin.


        :param name: The name of this Disziplin.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def a(self) -> float:
        """Gets the a of this Disziplin.


        :return: The a of this Disziplin.
        :rtype: float
        """
        return self._a

    @a.setter
    def a(self, a: float):
        """Sets the a of this Disziplin.


        :param a: The a of this Disziplin.
        :type a: float
        """

        self._a = a

    @property
    def c(self) -> float:
        """Gets the c of this Disziplin.


        :return: The c of this Disziplin.
        :rtype: float
        """
        return self._c

    @c.setter
    def c(self, c: float):
        """Sets the c of this Disziplin.


        :param c: The c of this Disziplin.
        :type c: float
        """

        self._c = c

    @property
    def d(self) -> float:
        """Gets the d of this Disziplin.


        :return: The d of this Disziplin.
        :rtype: float
        """
        return self._d

    @d.setter
    def d(self, d: float):
        """Sets the d of this Disziplin.


        :param d: The d of this Disziplin.
        :type d: float
        """

        self._d = d

    @property
    def geschlecht(self) -> str:
        """Gets the geschlecht of this Disziplin.


        :return: The geschlecht of this Disziplin.
        :rtype: str
        """
        return self._geschlecht

    @geschlecht.setter
    def geschlecht(self, geschlecht: str):
        """Sets the geschlecht of this Disziplin.


        :param geschlecht: The geschlecht of this Disziplin.
        :type geschlecht: str
        """
        allowed_values = ["maennlich", "weiblich", "divers"]  # noqa: E501
        if geschlecht not in allowed_values:
            raise ValueError(
                "Invalid value for `geschlecht` ({0}), must be one of {1}"
                .format(geschlecht, allowed_values)
            )

        self._geschlecht = geschlecht

    @property
    def formel(self) -> str:
        """Gets the formel of this Disziplin.


        :return: The formel of this Disziplin.
        :rtype: str
        """
        return self._formel

    @formel.setter
    def formel(self, formel: str):
        """Sets the formel of this Disziplin.


        :param formel: The formel of this Disziplin.
        :type formel: str
        """
        allowed_values = ["lauf", "andere"]  # noqa: E501
        if formel not in allowed_values:
            raise ValueError(
                "Invalid value for `formel` ({0}), must be one of {1}"
                .format(formel, allowed_values)
            )

        self._formel = formel
