# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Ergebnis(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, id: str=None, disziplin_id: str=None, schueler_id: str=None, wert: float=None, punkte: float=None):  # noqa: E501
        """Ergebnis - a model defined in Swagger

        :param id: The id of this Ergebnis.  # noqa: E501
        :type id: str
        :param disziplin_id: The disziplin_id of this Ergebnis.  # noqa: E501
        :type disziplin_id: str
        :param schueler_id: The schueler_id of this Ergebnis.  # noqa: E501
        :type schueler_id: str
        :param wert: The wert of this Ergebnis.  # noqa: E501
        :type wert: float
        :param punkte: The punkte of this Ergebnis.  # noqa: E501
        :type punkte: float
        """
        self.swagger_types = {
            'id': str,
            'disziplin_id': str,
            'schueler_id': str,
            'wert': float,
            'punkte': float
        }

        self.attribute_map = {
            'id': 'id',
            'disziplin_id': 'disziplin_id',
            'schueler_id': 'schueler_id',
            'wert': 'wert',
            'punkte': 'punkte'
        }
        self._id = id
        self._disziplin_id = disziplin_id
        self._schueler_id = schueler_id
        self._wert = wert
        self._punkte = punkte

    @classmethod
    def from_dict(cls, dikt) -> 'Ergebnis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ergebnis of this Ergebnis.  # noqa: E501
        :rtype: Ergebnis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Ergebnis.


        :return: The id of this Ergebnis.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Ergebnis.


        :param id: The id of this Ergebnis.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def disziplin_id(self) -> str:
        """Gets the disziplin_id of this Ergebnis.


        :return: The disziplin_id of this Ergebnis.
        :rtype: str
        """
        return self._disziplin_id

    @disziplin_id.setter
    def disziplin_id(self, disziplin_id: str):
        """Sets the disziplin_id of this Ergebnis.


        :param disziplin_id: The disziplin_id of this Ergebnis.
        :type disziplin_id: str
        """
        if disziplin_id is None:
            raise ValueError("Invalid value for `disziplin_id`, must not be `None`")  # noqa: E501

        self._disziplin_id = disziplin_id

    @property
    def schueler_id(self) -> str:
        """Gets the schueler_id of this Ergebnis.


        :return: The schueler_id of this Ergebnis.
        :rtype: str
        """
        return self._schueler_id

    @schueler_id.setter
    def schueler_id(self, schueler_id: str):
        """Sets the schueler_id of this Ergebnis.


        :param schueler_id: The schueler_id of this Ergebnis.
        :type schueler_id: str
        """
        if schueler_id is None:
            raise ValueError("Invalid value for `schueler_id`, must not be `None`")  # noqa: E501

        self._schueler_id = schueler_id

    @property
    def wert(self) -> float:
        """Gets the wert of this Ergebnis.


        :return: The wert of this Ergebnis.
        :rtype: float
        """
        return self._wert

    @wert.setter
    def wert(self, wert: float):
        """Sets the wert of this Ergebnis.


        :param wert: The wert of this Ergebnis.
        :type wert: float
        """
        if wert is None:
            raise ValueError("Invalid value for `wert`, must not be `None`")  # noqa: E501

        self._wert = wert

    @property
    def punkte(self) -> float:
        """Gets the punkte of this Ergebnis.


        :return: The punkte of this Ergebnis.
        :rtype: float
        """
        return self._punkte

    @punkte.setter
    def punkte(self, punkte: float):
        """Sets the punkte of this Ergebnis.


        :param punkte: The punkte of this Ergebnis.
        :type punkte: float
        """
        if punkte is None:
            raise ValueError("Invalid value for `punkte`, must not be `None`")  # noqa: E501

        self._punkte = punkte
